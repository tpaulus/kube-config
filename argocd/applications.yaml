apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: cert-manager
    helm:
      parameters:
      - name: installCRDs
        value: "true"
    repoURL: https://charts.jetstack.io
    targetRevision: v1.13.3
  syncPolicy:
    automated:
      prune: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik
  namespace: argocd
spec:
  destination:
    namespace: traefik
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: traefik
    helm:
      parameters:
      - name: deployment.replicas
        value: "2"
      values: |
        experimental.plugins.enabled: true

        ports:
          web:
            redirectTo:
              port: websecure
              priority: 10

          web-ext:
            port: 9200
            exposedPort: 9200
            protocol: TCP

        experimental:
          plugins:
            jwt:
              moduleName: github.com/tpaulus/jwt-middleware
              version: v1.1.10
        
        providers:
          kubernetesIngress:
            publishedService:
              enabled: true
    repoURL: https://traefik.github.io/charts
    targetRevision: 26.0.0
  syncPolicy:
    automated:
      prune: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: argocd
spec:
  destination:
    namespace: argocd
    server: https://kubernetes.default.svc
  project: default
  source:
    path: argocd
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: backup-unifi-protect
  namespace: argocd
spec:
  destination:
    namespace: backup-unifi-protect
    server: https://kubernetes.default.svc
  project: default
  source:
    path: backup-unifi-protect
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: blog
  namespace: argocd
spec:
  destination:
    namespace: blog
    server: https://kubernetes.default.svc
  project: default
  source:
    path: blog
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cloudflared
  namespace: argocd
spec:
  destination:
    namespace: cloudflared
    server: https://kubernetes.default.svc
  project: default
  source:
    path: cloudflared
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cloudprober
  namespace: argocd
spec:
  destination:
    namespace: cloudprober
    server: https://kubernetes.default.svc
  project: default
  source:
    path: cloudprober
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: coa-utility-bill-generator
  namespace: argocd
spec:
  destination:
    namespace: coa-utility-bill-generator
    server: https://kubernetes.default.svc
  project: default
  source:
    path: coa-utility-bill-generator
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana
  namespace: argocd
spec:
  destination:
    namespace: grafana
    server: https://kubernetes.default.svc
  project: default
  source:
    path: grafana
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: icloudpd
  namespace: argocd
spec:
  destination:
    namespace: icloudpd
    server: https://kubernetes.default.svc
  project: default
  source:
    path: icloudpd
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-system
  namespace: argocd
spec:
  destination:
    namespace: kube-system
    server: https://kubernetes.default.svc
  project: default
  source:
    path: kube-system
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kubernetes-dashboard
  namespace: argocd
spec:
  destination:
    namespace: kubernetes-dashboard
    server: https://kubernetes.default.svc
  project: default
  source:
    path: kubernetes-dashboard
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  source:
    path: longhorn
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: metallb
  namespace: argocd
spec:
  destination:
    namespace: metallb-system
    server: https://kubernetes.default.svc
  project: default
  source:
    path: metallb
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: metrics-exporters
  namespace: argocd
spec:
  destination:
    namespace: metrics-exporters
    server: https://kubernetes.default.svc
  project: default
  source:
    path: metrics-exporters
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  project: default
  source:
    path: monitoring
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: n8n
  namespace: argocd
spec:
  destination:
    namespace: n8n
    server: https://kubernetes.default.svc
  project: default
  source:
    path: n8n
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: netbox
  namespace: argocd
spec:
  destination:
    namespace: netbox
    server: https://kubernetes.default.svc
  project: default
  source:
    path: netbox
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: offset-tracker
  namespace: argocd
spec:
  destination:
    namespace: offset-tracker
    server: https://kubernetes.default.svc
  project: default
  source:
    path: offset-tracker
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: postgres
  namespace: argocd
spec:
  destination:
    namespace: postgres
    server: https://kubernetes.default.svc
  project: default
  source:
    path: postgres
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik-customizations
  namespace: argocd
spec:
  destination:
    namespace: traefik
    server: https://kubernetes.default.svc
  project: default
  source:
    path: traefik
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vlmcsd
  namespace: argocd
spec:
  destination:
    namespace: vlmcsd
    server: https://kubernetes.default.svc
  project: default
  source:
    path: vlmcsd
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: smtp-relay
  namespace: argocd
spec:
  destination:
    namespace: smtp-relay
    server: https://kubernetes.default.svc
  project: default
  source:
    path: smtp-relay
    repoURL: git@github.com:tpaulus/kube-config.git
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: authentik
spec:
  destination:
    name: ''
    namespace: authentik
    server: 'https://kubernetes.default.svc'
  source:
    path: ''
    repoURL: 'https://charts.goauthentik.io'
    targetRevision: 2024.2.2
    chart: authentik
    helm:
      values: |-
        {
            "authentik": {
                "email": {
                    "host": "smtp-relay.smtp-relay.svc.cluster.local",
                    "port": 25,
                    "from": "authentik@whitestar.systems"
                }
            },

            "server": {
                "ingress": {
                    "annotations": {
                        "traefik.ingress.kubernetes.io/router.entrypoints": "web-ext",
                        "traefik.ingress.kubernetes.io/router.middlewares": "authentik-inject-headers@kubernetescrd"
                    },
                    "enabled": true,
                    "hosts": [
                        "authentik.auth-ing.k3s.brickyard.whitestar.systems",
                        "auth.whitestar.systems"
                    ]
                },
                "metrics": {
                    "enabled": true
                }
            },

            "postgres": {
                "enabled": false
            },

            "redis": {
                "enabled": true
            },

            "global": {
                "addPrometheusAnnotations": true,
                "env": [
                    {
                        "name": "AUTHENTIK_POSTGRESQL__HOST",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "authentik-pguser-authentik",
                                "key": "host"
                            }
                        }
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__NAME",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "authentik-pguser-authentik",
                                "key": "dbname"
                            }
                        }
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__USER",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "authentik-pguser-authentik",
                                "key": "user"
                            }
                        }
                    },
                     {
                        "name": "AUTHENTIK_POSTGRESQL__PORT",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "authentik-pguser-authentik",
                                "key": "port"
                            }
                        }
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__PASSWORD",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "authentik-pguser-authentik",
                                "key": "password"
                            }
                        }
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__SSLMODE",
                        "value": "require"
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__SSLROOTCERT",
                        "value": "/etc/ssl/postgres/ca.crt"
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__SSLCERT",
                        "value": "/etc/ssl/postgres/tls.crt"
                    },
                    {
                        "name": "AUTHENTIK_POSTGRESQL__SSLKEY",
                        "value": "/etc/ssl/postgres/tls.key"
                    }
                ],
                "envFrom": [
                    {
                        "secretRef": {
                            "name": "authentik-secret"
                        }
                    }
                ],
                "securityContext": {
                  "fsGroup": 1000
                },

                "volumeMounts": [
                    {
                      "name": "db-cert",
                      "mountPath": "/etc/ssl/postgres"
                    }
                ],

                "volumes": [
                    {
                      "name": "db-cert",
                      "secret": {
                        "secretName": "authentik-cluster-cert",
                        "items": [
                          {
                            "key": "tls.crt",
                            "path": "tls.crt",
                            "mode": 0o775
                          },
                          {
                            "key": "tls.key",
                            "path": "tls.key",
                            "mode": 0o640
                          },
                          {
                            "key": "ca.crt",
                            "path": "postgresql.crt",
                            "mode": 0o775
                          }
                        ]
                      }
                    }
                  ]
            },
            "geoip": {
                "enabled": false
            },
            "additionalObjects": [
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PostgresCluster",
                "metadata": {
                  "name": "authentik",
                  "namespace": "authentik"
                },
                "spec": {
                  "image": "registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi8-15.5-0",
                  "postgresVersion": 15,
                  "instances": [
                    {
                      "name": "authentik-primary",
                      "dataVolumeClaimSpec": {
                        "accessModes": [
                          "ReadWriteOnce"
                        ],
                        "resources": {
                          "requests": {
                            "storage": "5Gi"
                          }
                        }
                      }
                    }
                  ],
                  "users": [
                    {
                      "databases": [
                        "authentik"
                      ],
                      "name": "authentik",
                      "options": "SUPERUSER"
                    }
                  ],
                  "backups": {
                    "pgbackrest": {
                      "image": "registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi8-2.47-2",
                      "repos": [
                        {
                          "name": "repo1",
                          "volume": {
                            "volumeClaimSpec": {
                              "accessModes": [
                                "ReadWriteOnce"
                              ],
                              "resources": {
                                "requests": {
                                  "storage": "5Gi"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "apiVersion": "onepassword.com/v1",
                "kind": "OnePasswordItem",
                "metadata": {
                  "name": "authentik-secret",
                  "namespace": "authentik"
                },
                "spec": {
                  "itemPath": "vaults/K3S/items/authentik"
                }
              },
              {
                "apiVersion": "traefik.io/v1alpha1",
                "kind": "Middleware",
                "metadata": {
                  "name": "inject-headers"
                },
                "spec": {
                  "headers": {
                    "customRequestHeaders": {
                      "X-Forwarded-Proto": "https"
                    }
                  }
                }
              }
            ]
        }
  sources: []
  project: default
  syncPolicy:
    automated:
      prune: true
    syncOptions:
    - CreateNamespace=true
